# default to the python provider
# nixpacks for railway frontend deployment. Copy to nixpacks.toml and deploy with `railway up`
providers = ['python']

# set up some variables to minimize annoyance
[variables]
    NEXT_TELEMETRY_DISABLED = '1' # disable next telemetry
    NPM_CONFIG_UPDATE_NOTIFIER = 'false' # the update check is relatively useless in a production environment
    NPM_CONFIG_FUND = 'false' # the fund notification is also relatively useless in a production environment
    PIP_DISABLE_PIP_VERSION_CHECK = '1' # the update check is relatively useless in a production environment
    # Add Node.js memory and process limits
    NODE_OPTIONS = '--max-old-space-size=4096' # Increased to 4GB for build process
    UV_THREADPOOL_SIZE = '2' # Reduced thread pool size to prevent resource exhaustion

# default setup phase
[phases.setup]
    nixPkgs = ['...', 'unzip', 'parallel', 'curl', 'gcc'] # install unzip because reflex needs it, parallel for running services, curl for downloading uv, gcc for compilation
    nixLibs = ['zlib', 'gcc-unwrapped.lib']

# install uv package manager
[phases.uv-install]
    dependsOn = ['setup']
    cmds = ['curl -LsSf https://astral.sh/uv/install.sh | sh && echo "export PATH=\"$HOME/.cargo/bin:$PATH\"" >> ~/.bashrc']

# install dependencies using uv and pyproject.toml
[phases.install]
    dependsOn = ['uv-install']
    cmds = ['export PATH="$HOME/.cargo/bin:$PATH" && uv sync --frozen']

# reflex init phase
[phases.init]
    dependsOn = ['install'] # run after install
    cmds = ['export PATH="$HOME/.cargo/bin:$PATH" && uv run reflex init'] # re-initialize the app with the latest template using uv

# export frontend phase
[phases.export]
    dependsOn = ['init'] # run after init
    cmds = [
        # Set environment variables for export
        'export FRONTEND_DEPLOY_URL="${FRONTEND_DEPLOY_URL}"',
        'export REFLEX_API_URL="${REFLEX_API_URL}"',
        # Set ulimits and memory constraints for the export process
        'ulimit -n 8192',  # Increased file descriptor limit
        'ulimit -u 512',   # Reduced process limit to prevent fork bombs
        'ulimit -v 8388608',  # Set virtual memory limit to 8GB
        'export NODE_OPTIONS="--max-old-space-size=4096"',
        # Disable Next.js parallel compilation to reduce memory usage
        'export NEXT_DISABLE_SWC_WASM=1',
        'export PATH="$HOME/.cargo/bin:$PATH" && uv run reflex export --frontend-only --no-zip'
    ]
    # export the frontend

# install caddy phase
[phases.caddy]
    dependsOn = ['export']
    nixpkgsArchive = 'ced9bf9f7c303c7d4acc6c4a1bb44368c6baae3f' # https://github.com/NixOS/nixpkgs/commit/ced9bf9f7c303c7d4acc6c4a1bb44368c6baae3f (Caddy v2.7.5)
    nixPkgs = ['caddy'] # install caddy

# format the caddyfile
[phases.fmt]
    dependsOn = ['caddy'] # run after caddy
    cmds = ['caddy fmt --overwrite'] # format the caddyfile and overwrite changes

# start phase - Run both reflex and caddy
[start]
    cmd = 'export PATH="$HOME/.cargo/bin:$PATH" && export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/nix/store/*/lib" && export NODE_OPTIONS="--max-old-space-size=4096" && ulimit -n 8192 && ulimit -u 512 && parallel -j 2 --lb ::: "REFLEX_ACCESS_TOKEN=\"${REFLEX_ACCESS_TOKEN}\" REFLEX_SHOW_BUILT_WITH_REFLEX=0 FRONTEND_DEPLOY_URL=\"${FRONTEND_DEPLOY_URL}\" REFLEX_API_URL=\"${REFLEX_API_URL}\" uv run reflex run --frontend-only --env ${REFLEX_ENV_MODE:-prod}" "caddy run"'
    # run the frontend and caddy in parallel using GNU parallel