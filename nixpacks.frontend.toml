# default to the python provider
# nixpacks for railway frontend deployment. Copy to nixpacks.toml and deploy with `railway up`
providers = ['python']

# set up some variables to minimize annoyance
[variables]
    NEXT_TELEMETRY_DISABLED = '1' # disable next telemetry
    NPM_CONFIG_UPDATE_NOTIFIER = 'false' # the update check is relatively useless in a production environment
    NPM_CONFIG_FUND = 'false' # the fund notification is also relatively useless in a production environment
    PIP_DISABLE_PIP_VERSION_CHECK = '1' # the update check is relatively useless in a production environment
    NIXPACKS_DEBIAN_PACKAGES = "libstdc++6,build-essential,gcc,g++,libc6-dev,git" # system dependencies for numpy/scientific libraries
    LD_LIBRARY_PATH = "/usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu:/usr/lib:/lib"
    CC = "gcc"
    CXX = "g++"
    # Use a more compatible base image
    NIXPACKS_BASE_IMAGE = "python:3.11-slim-bullseye"

# system dependencies setup phase
[phases.system]
    aptPkgs = ['libstdc++6', 'build-essential', 'gcc', 'g++', 'libc6-dev', 'git', 'ca-certificates', 'curl']
    cmds = [
        'apt-get update && apt-get install -y --no-install-recommends libstdc++6 build-essential gcc g++ libc6-dev git ca-certificates curl',
        'python -m pip install --upgrade pip setuptools wheel'
    ]

# default setup phase
[phases.setup]
    dependsOn = ['system']
    nixPkgs = ['...', 'unzip', 'parallel'] # install unzip because reflex needs it, and install parallel to run the frontend and backend at the same time
    nixLibs = ['zlib']

# custom install phase to handle dependencies more robustly
[phases.install]
    dependsOn = ['setup']
    cmds = [
        'python -m pip install --no-cache-dir --upgrade pip setuptools wheel',
        'python -m pip install --no-cache-dir -r requirements.txt'
    ]

# reflex init phase
[phases.init]
    dependsOn = ['install'] # run after install (install is the default phase for installing the python modules)
    cmds = ['reflex init --loglevel debug'] # re-initialize the app with the latest template

# export frontend phase
[phases.export]
    dependsOn = ['init'] # run after init
    cmds = [
        'FRONTEND_DEPLOY_URL="${FRONTEND_DEPLOY_URL}"',
        'REFLEX_API_URL="${REFLEX_API_URL}"',
        'reflex export --frontend-only --no-zip --loglevel debug'
    ]
    # export the frontend with debug logging
    # export the backend

# install caddy phase
[phases.caddy]
    dependsOn = ['export']
    nixpkgsArchive = 'ced9bf9f7c303c7d4acc6c4a1bb44368c6baae3f' # https://github.com/NixOS/nixpkgs/commit/ced9bf9f7c303c7d4acc6c4a1bb44368c6baae3f (Caddy v2.7.5)
    nixPkgs = ['caddy'] # install caddy

# format the caddyfile
[phases.fmt]
    dependsOn = ['caddy'] # run after caddy
    cmds = ['caddy fmt --overwrite'] # format the caddyfile and overwrite changes

# start phase
[start]
    cmd = 'REFLEX_ACCESS_TOKEN="${REFLEX_ACCESS_TOKEN}" REFLEX_SHOW_BUILT_WITH_REFLEX=0 FRONTEND_DEPLOY_URL="${FRONTEND_DEPLOY_URL}" REFLEX_API_URL="${REFLEX_API_URL}" reflex run --frontend-only --env ${REFLEX_ENV_MODE:-prod} && caddy run 2>&1'
    # run the backend and caddy in parallel, this will fail fast if either service crashes allowing railway to restart the deployment