# default to the python provider
# nixpacks for railway backend deployment. Copy to nixpacks.toml and deploy with `railway up`
providers = ['python']

# set up some variables to minimize annoyance
[variables]
    NEXT_TELEMETRY_DISABLED = '1' # disable next telemetry
    NPM_CONFIG_UPDATE_NOTIFIER = 'false' # the update check is relatively useless in a production environment
    NPM_CONFIG_FUND = 'false' # the fund notification is also relatively useless in a production environment
    PIP_DISABLE_PIP_VERSION_CHECK = '1' # the update check is relatively useless in a production environment
    # Environment variables for C++ runtime libraries
    LD_LIBRARY_PATH = '/nix/store/*/lib:/usr/lib:/lib'
    CC = 'gcc'
    CXX = 'g++'

# default setup phase
[phases.setup]
    nixPkgs = ['...', 'unzip', 'parallel', 'curl', 'gcc', 'stdenv.cc.cc'] # essential packages for pymilvus/ujson
    nixLibs = ['zlib', 'stdenv.cc.cc.lib']

# install uv package manager using pip
[phases.uv-install]
    dependsOn = ['setup']
    cmds = [
        'pip install uv',
        'which uv'
    ]

# setup library paths for C++ runtime
[phases.lib-setup]
    dependsOn = ['uv-install']
    cmds = [
        'echo "Setting up C++ runtime libraries..."',
        'find /nix/store -name "libstdc++.so*" 2>/dev/null | head -5',
        'find /nix/store -name "libgcc_s.so*" 2>/dev/null | head -5',
        'export LD_LIBRARY_PATH="/nix/store/*/lib:$LD_LIBRARY_PATH"',
        'echo "export LD_LIBRARY_PATH=/nix/store/*/lib:$LD_LIBRARY_PATH" >> ~/.bashrc'
    ]

# install dependencies using uv and pyproject.toml
[phases.install]
    dependsOn = ['lib-setup']
    cmds = [
        'source ~/.bashrc',
        'uv sync'
    ]

# reflex init phase
[phases.init]
    dependsOn = ['install'] # run after install
    cmds = [
        'source ~/.bashrc',
        'uv run reflex init'
    ] # re-initialize the app with the latest template using uv

# export backend phase
[phases.export]
    dependsOn = ['init'] # run after init
    cmds = [
        'source ~/.bashrc',
        'FRONTEND_DEPLOY_URL="${FRONTEND_DEPLOY_URL}"',
        'uv run reflex export --backend-only --no-zip'
    ]
    # export the backend

# install caddy phase
[phases.caddy]
    dependsOn = ['export']
    nixpkgsArchive = 'ced9bf9f7c303c7d4acc6c4a1bb44368c6baae3f' # https://github.com/NixOS/nixpkgs/commit/ced9bf9f7c303c7d4acc6c4a1bb44368c6baae3f (Caddy v2.7.5)
    nixPkgs = ['caddy'] # install caddy

# format the caddyfile
[phases.fmt]
    dependsOn = ['caddy'] # run after caddy
    cmds = ['caddy fmt --overwrite'] # format the caddyfile and overwrite changes

# start phase
[start]
    cmd = 'source ~/.bashrc && REFLEX_ACCESS_TOKEN="${REFLEX_CLOUD_TOKEN}" REFLEX_SHOW_BUILT_WITH_REFLEX=0 FRONTEND_DEPLOY_URL="${FRONTEND_DEPLOY_URL}" uv run reflex run --backend-only --env ${REFLEX_ENV_MODE:-prod} && caddy run 2>&1'
    # run the backend and caddy in parallel, this will fail fast if either service crashes allowing railway to restart the deployment